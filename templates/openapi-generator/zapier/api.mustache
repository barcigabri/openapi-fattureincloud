{{#operations}}
{{#operation}}
{{#allParams}}
{{^isPrimitiveType}}
const {{baseType}} = require('../{{modelPackage}}/{{baseType}}').fields;
const {{baseType}}Mapping = require('../{{modelPackage}}/{{baseType}}').mapping;
{{/isPrimitiveType}}
{{/allParams}}
{{#returnType}}
{{^returnTypeIsPrimitive}}
const {{returnType}} = require('../{{modelPackage}}/{{returnType}}').fields;
{{/returnTypeIsPrimitive}}
{{/returnType}}
{{/operation}}
{{/operations}}
const utils = require('../utils/utils');

{{#operations}}
module.exports = {
{{#operation}}
    {{operationId}}: {
        key: '{{operationId}}',
        noun: '{{summary}}',
        display: {
            label: '{{operationId}}',
            description: '{{#notes}}{{.}}{{/notes}}',
            hidden: false,
        },
        operation: {
            inputFields: [
                {{#allParams}}
                {{#isPrimitiveType}}
                {
                    key: '{{paramName}}',
                    label: '{{description}}',
                    type: '{{#isInteger}}integer{{/isInteger}}{{^isInteger}}{{#isNumeric}}number{{/isNumeric}}{{/isInteger}}{{#isString}}string{{/isString}}{{#isBoolean}}boolean{{/isBoolean}}{{#isDateTime}}datetime{{/isDateTime}}{{#isDate}}datetime{{/isDate}}{{#isFile}}file{{/isFile}}',
                    {{#isEnum}}
                    choices: [
                        {{#_enum}}
                        '{{.}}',
                        {{/_enum}}
                    ],
                    {{/isEnum}}
                },
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                ...{{baseType}}(),
                {{/isPrimitiveType}}
                {{/allParams}}
            ],
            outputFields: [
                {{#returnType}}
                {{^returnTypeIsPrimitive}}
                ...{{returnType}}(),
                {{/returnTypeIsPrimitive}}
                {{/returnType}}
            ],
            perform: async (z, bundle) => {
                const options = {
                    url: utils.replacePathParameters('{{basePath}}{{path}}'),
                    method: '{{httpMethod}}',
                    removeMissingValuesFrom: { params: true, body: true },
                    headers: {
                        'Authorization': 'Bearer {{=<% %>=}}{{bundle.authData.access_token}}<%={{ }}=%>',
                        {{#consumes}}'Content-Type': '{{{mediaType}}}',{{^-last}}, {{/-last}}{{/consumes}}
                        'Accept': '{{#produces}}{{{mediaType}}}{{^-last}}, {{/-last}}{{/produces}}',
                    },
                    params: {
                    {{#allParams}}
                    {{#isQueryParam}}
                        '{{paramName}}': bundle.inputData?.['{{paramName}}'],
                    {{/isQueryParam}}
                    {{/allParams}}
                    },
                    body: {
                    {{#allParams}}
                    {{#isBodyParam}}
                        {{#isPrimitiveType}}'{{paramName}}': bundle.inputData?.['{{paramName}}']{{/isPrimitiveType}}{{^isPrimitiveType}}...{{paramName}}Mapping(bundle){{/isPrimitiveType}},
                    {{/isBodyParam}}
                    {{/allParams}}
                    },
                }
                return z.request(options).then((response) => {
                    response.throwForStatus();
                    const results = response.json;
                    return results;
                })
            }
        }
    },
{{/operation}}
}
{{/operations}}
